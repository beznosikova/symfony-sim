<?php

namespace AppBundle\Repository;
use AppBundle\Entity\Category;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{
    const PRODUCT_LIMIT = 2;

    public function findActive()
    {
        return $this
            ->createQueryBuilder('product')
            ->join('product.category', 'category')
            ->where("product.active = :active")
            ->andWhere('category.active = :active')
            ->setParameter('active', 1)
            ->orderBy('product.price', 'ASC')
            ->getQuery()
            ->getResult()
            ;
    }

	public function findActiveByAlias($alias)
	{
		return $this
			->createQueryBuilder('product')
			->where("product.alias = :alias")
            ->setParameter('alias', $alias)
			->andWhere('product.active = :active')
            ->setParameter('active', 1)
			->getQuery()
			->getOneOrNullResult()
		;
	}

    public function findByCategory(Category $category)
    {
        return $this
            ->createQueryBuilder('product')
            ->where('product.active = :active')
            ->setParameter('active', 1)
            ->andWhere('product.category = :category')
            ->setParameter('category', $category)
            ->getQuery()
            ->getResult()
        ;
    }

    public function findByCategoryByPage(Category $category, $page = 1)
    {
        $query = $this
            ->createQueryBuilder('product')
            ->where('product.active = :active')
            ->setParameter('active', 1)
            ->andWhere('product.category = :category')
            ->setParameter('category', $category)
            ->getQuery();

        $paginator = new Paginator($query);
        $paginator
            ->getQuery()
            ->setFirstResult(self::PRODUCT_LIMIT * ($page-1)) // set the offset
            ->setMaxResults(self::PRODUCT_LIMIT); // set the limit

//        $totalItems = count($paginator);
//        $pagesCount = ceil($totalItems / self::PRODUCT_LIMIT);

        return  $paginator;
    }
}
